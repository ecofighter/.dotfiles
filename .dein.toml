[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
if = '!has("nvim")'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'kassio/neoterm'
if = 'has("nvim")'
hook_add = '''
  set sh=bash
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_set_loclist = 1
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 1
  let g:ale_linters = {
    \ 'haskell': ['hlint', 'stack-ghc-mod']
  \}
'''

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['tpope/vim-fugitive']
hook_add = '''
let g:lightline = {
  \ 'colorscheme' : 'wombat',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'fugitive', 'filename' ] ]
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' },
  \ 'component_function': {
  \   'fugitive': 'LightlineFugitive',
  \   'readonly': 'LightlineReadonly',
  \   'modified': 'LightlineModified',
  \   'filename': 'LightlineFilename',
  \ },
  \ }

function! LightlineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightlineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return ""
  else
    return ""
  endif
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction
'''

[[plugins]]
if = 'has("python3")'
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim', 'neoyank.vim']
hook_post_source = '''
  " ripgrep on file_rec source
  " call denite#custom#var('file_rec', 'command',
  "    \ ['rg', '--files', '--glob', '!.git', ''])
  " the_silver_searcher
  call denite#custom#var('file_rec', 'command',
      \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  
  " Ripgrep command on grep source
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('grep', 'default_opts',
      \ ['--vimgrep', '--no-heading', '--follow'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
'''
[[plugins]]
repo = 'Shougo/neocomplete'
if = '!has("nvim")'
hook_add = '''
  let g:neocomplete#enable_at_startup = 1
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
    \ neosnippet#expandable_or_jumpable() ?
    \   "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
    \ neosnippet#expandable_or_jumpable() ?
    \   "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'elixir-lang/vim-elixir'
